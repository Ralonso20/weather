import Button from "@mui/material/Button";
import type { NextPage } from "next";
import Head from "next/head";
import { WeekForecast } from "../../components/week-forecast";
import styles from "../../styles/Home.module.css";
import mainStyles from "../../styles/mainCard.module.css";
import { useState, MouseEvent, useEffect } from "react";
import { SearchInput } from "../../components/common/search";
import { Typography } from "@mui/material";
import { WeatherClass } from "../../models/weather";
import styleButton from "../../styles/button.module.css";
import { locationService } from "../../service/location-service";
import { weatherService } from "../../service/weather-service";
import toast, { Toaster } from "react-hot-toast";
import StartBackground from "../../components/startBackground/startBackground";
import LoadingButton from "@mui/lab/LoadingButton";
const Home: NextPage = (props) => {
  const [isShown, setIsShown] = useState(false);
  const [field, setField] = useState("");
  const [data, setData] = useState<Array<WeatherClass>>(
    weatherService.getStorage()
  );
  const [inputError, setInputError] = useState(false);
  const [loading, setLoading] = useState(false);
  const handleClick = (event: MouseEvent<HTMLButtonElement, Event>) => {
    setIsShown((current: boolean) => !current);
  };

  const setInputLocation = async () => {
    setLoading(true);
    locationService.setLocation(field);
    const promise = getForecastData()
      .then((data) => {
        setData(data);
      })
      .catch((error) => {
        toast.error("Invalid location");
      })
      .finally(() => {
        setLoading(false);
    });

    toast.promise(promise, {
      loading: "Loading",
      success: "Success",
      error: "Error",
    });
  };

  const getForecastData = async () => {
    return await weatherService.gel(locationService.getStorageLocation());
  };

  return (
    <StartBackground>
      <div>
        <Toaster position="top-center" reverseOrder={false} />
        <Head>
          <title>Create Next App</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        {data?.map((item, index) => (
          <main key={index} className={styles.main}>
            {!isShown && (
              <div
                className={`${mainStyles.card} ${mainStyles.mainCard} ${mainStyles.swingBottom}`}
              >
                <h1>clyma</h1>
                <h3>{item.getLocation()}</h3>

                <SearchInput
                  field={field}
                  setField={setField}
                  // on key press if enter is pressed
                  onKeyPress={(e) => {
                    if (e.key === "Enter") {
                      setInputLocation();
                    }
                  }}
                ></SearchInput>
                <div className={mainStyles.weatherStateContainer}>
                  <Typography
                    variant="h1"
                    className={mainStyles.temperatureIndicator}
                  >
                    {item.getTemperature()}°
                  </Typography>
                  <Typography variant="h4">{item.getWeatherState()}</Typography>
                  <Typography variant="h4">
                    Min {item.getMinTemperature()}° | Max{" "}
                    {item.getMaxTemperature()}°
                  </Typography>
                  <Typography variant="h4">{item.getPubDate()}</Typography>
                </div>
                <div className={mainStyles.tableContainer}>
                  <table className={mainStyles.table}>
                    <colgroup>
                      <col className={mainStyles.colRight} />
                      <col className={mainStyles.colLeft} />
                    </colgroup>
                    <tbody className={mainStyles.rowContainer}>
                      <tr className={mainStyles.tableText}>
                        <td>Humidity</td>
                        <td>{item.getHumidity()}%</td>
                      </tr>
                      <tr className={mainStyles.tableText}>
                        <td>Pressure</td>
                        <td>{item.getPressure()} mB</td>
                      </tr>
                      <tr className={mainStyles.tableText}>
                        <td>Wind/sp</td>
                        <td>{item.getWindSpeed()} km/h</td>
                      </tr>
                    </tbody>
                  </table>
                </div>
                <LoadingButton
                  onClick={(e) => handleClick(e)}
                  variant="contained"
                  size="large"
                  className={styleButton.muiButton}
                  loading={loading}
                >
                  Week forecast
                </LoadingButton>
              </div>
            )}
            {isShown && (
              <WeekForecast
                isShown={isShown}
                setIsShown={setIsShown}
                forecastData={item.getDataForecast()}
              ></WeekForecast>
            )}
          </main>
        ))}
      </div>
    </StartBackground>
  );
};

export default Home;
